generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id       String @id
  username String @unique
}

model Student {
  id          String       @id
  username    String       @unique
  name        String
  surname     String
  email       String?      @unique
  phone       String?      @unique
  address     String
  bloodGroup  String
  image       String?
  gender      Gender
  createdAt   DateTime     @default(now())
  parentId    String
  Parents     Parent       @relation(fields: [parentId], references: [id])
  classId     Int
  class       Class        @relation(fields: [classId], references: [id])
  gradeId     Int
  grade       Grade        @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results     Result[]
}

model Teacher {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String? @unique
  phone     String? @unique
  image     String?
  bloodGroup String
  gender Gender
  address   String
  createdAt DateTime  @default(now())
  subjects  Subject[]
  lessons   Lesson[]
  classes   Class[]
}

model Parent {
  id        String    @id
  username  String    @unique
  name      String
  surname   String
  email     String?   @unique
  phone     String   @unique
  address   String
  createdAt DateTime  @default(now())
  Students  Student[]
}

model Grade {
  id        Int       @id @default(autoincrement())
  level     Int    @unique
  createdAt DateTime  @default(now())
  students  Student[]
  classes   Class[]
}

model Class {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  capacity      Int
  lessons       Lesson[]
  supervisorId  String
  superVisor    Teacher        @relation(fields: [supervisorId], references: [id])
  student       Student[]
  gradeId       Int
  grade         Grade          @relation(fields: [gradeId], references: [id])
  events        Event[]
  announcements Announcement[]
}

model Subject {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime  @default(now())
  Teachers  Teacher[]
  lessons   Lesson[]
}

model Lesson {
  id          Int          @id @default(autoincrement())
  name        String
  day         Day
  startTime   DateTime
  endTime     DateTime
  subjectId   Int
  Subject     Subject      @relation(fields: [subjectId], references: [id])
  classId     Int
  Class       Class        @relation(fields: [classId], references: [id])
  teacherId   String
  teacher     Teacher      @relation(fields: [teacherId], references: [id])
  exams       Exam[]
  assignments Assignment[]
  attendances Attendance[]
}

model Exam {
  id        Int      @id @default(autoincrement())
  name      String
  startTime DateTime
  endTime   DateTime
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  Result    Result[]
}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  startTime DateTime
  dueTime   DateTime
  createdAt DateTime @default(now())
  lessonId  Int
  lesson    Lesson   @relation(fields: [lessonId], references: [id])
  results   Result[]
}

model Result {
  id           Int        @id @default(autoincrement())
  score        Int
  examId       Int ?
  exam         Exam ?      @relation(fields: [examId], references: [id])
  assignmentId Int?
  assignment   Assignment ? @relation(fields: [assignmentId], references: [id])
  studentId    String
  student      Student    @relation(fields: [studentId], references: [id])
}

model Attendance {
  id      Int      @id @default(autoincrement())
  date    DateTime
  present Boolean

  lessonId  Int
  lesson    Lesson  @relation(fields: [lessonId], references: [id])
  studentId String
  student   Student @relation(fields: [studentId], references: [id])
}

model Announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  date        DateTime
  classId     Int
  class       Class    @relation(fields: [classId], references: [id])
  createdAt   DateTime @default(now())
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  classId     Int?
  class       Class?   @relation(fields: [classId], references: [id])
  createdAt   DateTime @default(now())
}

enum Gender {
  MALE
  FEMALE
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}
